from PCD8544 import PCD8544
from pyb import Accel, LED
from utime import sleep_ms
import framebuf
import math


degrees = 0

led_1 = LED(3)
led_2 = LED(4)

glcd = PCD8544()

glcd.fill(glcd.WHITE)
glcd.show()

accel = Accel()


img = framebuf.FrameBuffer(bytearray(
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\xc0\xe0\xe0\x70\x30\xf8\xf8\x98\x1c\x7c\xfc\xee\x06\x1e'
    b'\x7e\x7e\x06\x06\x06\x7e\x7e\x06\x06\x06\x7e\x7e\x7e\x06\xce\xfc\x7c\x1c\x98\xf8\xf8\x30\x70\xe0\xe0\xc0\xc0\x80\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xe0\xf0\x38\x3c\x7c\xe6\xc7\x0f\x3d\x39\x01'
    b'\x07\x07\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x03'
    b'\x01\x00\x06\x07\x03\x11\x3d\x1f\xcf\xe7\xfe\x7c\x38\x70\xe0\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xf0\xfc\x9e\x1f'
    b'\x3b\x33\x33\x07\x06\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xc0\xe0\x70\x38\x18\x0c\x0c\x06\x06\x07\x03\x03\x03\x03\x03\x03\x03\x03'
    b'\x03\x03\x03\x03\x03\x06\x06\x0c\x0c\x1c\x38\x30\x70\xe0\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x06\x07\x23\x73\x33\x3f\x9e\xbc\xf0'
    b'\xc0\x00\x00\x00\x00\xf0\xfe\x9f\x3b\x31\x33\x33\x03\x00\x00\x00\x00\x00\x00\x00\xc0\xf0\x7c\x1e\x0f\x03\x01\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x07\x0f\x3c\xf0\xc0'
    b'\x00\x00\x00\x00\x00\x00\x00\x03\x13\x33\x33\x39\x1f\xff\xf8\x80\xfe\xff\x3b\x33\x33\x33\x01\x00\x00\x00\x00\x00\x00\x00\x00\xf8'
    b'\xff\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x33\x33\x39\xff\xff\x07\x0f\x0f\x03'
    b'\x03\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x0f\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x0f\x03\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x03\x03\x03\x03\x0f\x0f'),
    76, 48, framebuf.MONO_VLSB)


def show_value(value):
    glcd.text("Deg:" + str("%3.1f" %value), 6, 1, glcd.BLACK)
    glcd.line(42, 47, (42 + int(28 * math.sin(value * 0.0175))), int(47 - (28 * math.cos(value * 0.0175))),  glcd.BLACK)


def map_value(v, x_min, x_max, y_min, y_max):
    return (y_min + (((y_max - y_min) / (x_max - x_min)) * (v - x_min)))


def contrain(value, min_value, max_value):
    if(value > max_value):
        return max_value
    
    elif(value < min_value):
        return min_value
    
    else:
        return value

    
while(True):
    acc_x, acc_y, acc_z = accel.filtered_xyz()
    degrees = contrain(acc_x, -80, 80)
    degrees = map_value(degrees, -80, 80, -90, 90)
    glcd.fill(glcd.WHITE)
    glcd.blit(img, 3, 10)
    glcd.ellipse(42, 47, 3, 3, glcd.BLACK, True)
    show_value(degrees)
    i = int(map_value(degrees, -90, 90, 0, 255))
    led_1.intensity(i)
    led_2.intensity(255 - i)
    glcd.show()
    sleep_ms(600)